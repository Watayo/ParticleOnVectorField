#pragma kernel VectorFieldMain
#pragma kernel ParticleMain

#define NUM_THREAD_X 8*8*8
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1
#define PI 3.14159265
#define TWO_PI PI*2
#include "UnityCG.cginc"
#include "Noise.cginc"
#include "NoiseMath.cginc"

struct VectorField {
    float3 position;
    float3 direction;
    float dirScalar;
};

struct Particle {
    float3 velocity;
    float3 position;
    float4 color;
    float scale;
};

RWStructuredBuffer<VectorField> _VectorFieldDataBuffer;
RWStructuredBuffer<Particle> _ParticleDataBuffer;

float _DeltaTime;
float _FrameCount;

[numthreads(NUM_THREAD_X, 1, 1)]
void VectorFieldMain (
    uint3 id : SV_DispatchThreadID,
    uint3 groupID: SV_GroupID,
    uint3 groupThreadID: SV_GroupThreadID,
    uint groupIndex: SV_GROUPINDEX
    )
{


    uint bufferIndex = id.x;
    VectorField vf = _VectorFieldDataBuffer[bufferIndex];

    float3 noiseSeed = vf.position * 0.05;
    float fc = _FrameCount * 0.04;
    vf.direction = Pnoise(noiseSeed * fc);
    vf.dirScalar = sqrt(dot(vf.direction, vf.direction));
    _VectorFieldDataBuffer[bufferIndex] = vf;
}

[numthreads(NUM_THREAD_X,1,1)]
void ParticleMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Particle p = _ParticleDataBuffer[index];

    for (int i = 0; i < NUM_THREAD_X; i++) {
        VectorField vf = _VectorFieldDataBuffer[i];
        float3 dir = p.position - vf.position;
        float dist = sqrt(dot(dir, dir));

        if (dist > 0.0 && dist <= 1.0) {
            p.velocity += vf.direction * vf.dirScalar * 0.05 * _DeltaTime;
            p.position += p.velocity * _DeltaTime;
        }
    }

    _ParticleDataBuffer[index] = p;
}